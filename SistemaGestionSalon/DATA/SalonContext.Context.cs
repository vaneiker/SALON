//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DATA
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SalonConnectionString : DbContext
    {
        public SalonConnectionString()
            : base("name=SalonConnectionString")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int SP_ActualizarCliente(Nullable<int> clienteID, string nombre, string telefono, string email)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizarCliente", clienteIDParameter, nombreParameter, telefonoParameter, emailParameter);
        }
    
        public virtual int SP_ActualizarMovimientoFinanciero(Nullable<int> movimientoID, string tipo, Nullable<decimal> monto, string descripcion, Nullable<int> usuarioID)
        {
            var movimientoIDParameter = movimientoID.HasValue ?
                new ObjectParameter("MovimientoID", movimientoID) :
                new ObjectParameter("MovimientoID", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizarMovimientoFinanciero", movimientoIDParameter, tipoParameter, montoParameter, descripcionParameter, usuarioIDParameter);
        }
    
        public virtual int SP_ActualizarProductoServicio(Nullable<int> productoServicioID, string nombre, string descripcion, Nullable<decimal> precio, string tipo, Nullable<int> stock)
        {
            var productoServicioIDParameter = productoServicioID.HasValue ?
                new ObjectParameter("ProductoServicioID", productoServicioID) :
                new ObjectParameter("ProductoServicioID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizarProductoServicio", productoServicioIDParameter, nombreParameter, descripcionParameter, precioParameter, tipoParameter, stockParameter);
        }
    
        public virtual int SP_ActualizarProveedor(Nullable<int> proveedorID, string nombre, string telefono, string email, string direccion)
        {
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizarProveedor", proveedorIDParameter, nombreParameter, telefonoParameter, emailParameter, direccionParameter);
        }
    
        public virtual int SP_ActualizarUsuario(Nullable<int> usuarioID, string nombreUsuario, string contraseña, string rol, Nullable<bool> activo)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizarUsuario", usuarioIDParameter, nombreUsuarioParameter, contraseñaParameter, rolParameter, activoParameter);
        }
    
        public virtual int SP_ActualizarVenta(Nullable<int> ventaID, Nullable<int> clienteID, Nullable<int> usuarioID, string metodoPago, Nullable<decimal> total, string comentarios)
        {
            var ventaIDParameter = ventaID.HasValue ?
                new ObjectParameter("VentaID", ventaID) :
                new ObjectParameter("VentaID", typeof(int));
    
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var metodoPagoParameter = metodoPago != null ?
                new ObjectParameter("MetodoPago", metodoPago) :
                new ObjectParameter("MetodoPago", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizarVenta", ventaIDParameter, clienteIDParameter, usuarioIDParameter, metodoPagoParameter, totalParameter, comentariosParameter);
        }
    
        public virtual int SP_EliminarCliente(Nullable<int> clienteID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarCliente", clienteIDParameter);
        }
    
        public virtual int SP_EliminarMovimientoFinanciero(Nullable<int> movimientoID)
        {
            var movimientoIDParameter = movimientoID.HasValue ?
                new ObjectParameter("MovimientoID", movimientoID) :
                new ObjectParameter("MovimientoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarMovimientoFinanciero", movimientoIDParameter);
        }
    
        public virtual int SP_EliminarProductoServicio(Nullable<int> productoServicioID)
        {
            var productoServicioIDParameter = productoServicioID.HasValue ?
                new ObjectParameter("ProductoServicioID", productoServicioID) :
                new ObjectParameter("ProductoServicioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarProductoServicio", productoServicioIDParameter);
        }
    
        public virtual int SP_EliminarProveedor(Nullable<int> proveedorID)
        {
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarProveedor", proveedorIDParameter);
        }
    
        public virtual int SP_EliminarUsuario(Nullable<int> usuarioID)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarUsuario", usuarioIDParameter);
        }
    
        public virtual int SP_EliminarVenta(Nullable<int> ventaID)
        {
            var ventaIDParameter = ventaID.HasValue ?
                new ObjectParameter("VentaID", ventaID) :
                new ObjectParameter("VentaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarVenta", ventaIDParameter);
        }
    
        public virtual int SP_InactivarUsuario(Nullable<int> usuarioID)
        {
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InactivarUsuario", usuarioIDParameter);
        }
    
        public virtual int SP_InsertarCliente(string nombre, string telefono, string email)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarCliente", nombreParameter, telefonoParameter, emailParameter);
        }
    
        public virtual int SP_InsertarMovimientoFinanciero(string tipo, Nullable<decimal> monto, string descripcion, Nullable<int> usuarioID)
        {
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarMovimientoFinanciero", tipoParameter, montoParameter, descripcionParameter, usuarioIDParameter);
        }
    
        public virtual int SP_InsertarProductoServicio(string nombre, string descripcion, Nullable<decimal> precio, string tipo, Nullable<int> stock)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarProductoServicio", nombreParameter, descripcionParameter, precioParameter, tipoParameter, stockParameter);
        }
    
        public virtual int SP_InsertarProveedor(string nombre, string telefono, string email, string direccion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarProveedor", nombreParameter, telefonoParameter, emailParameter, direccionParameter);
        }
    
        public virtual int SP_InsertarUsuario(string nombreUsuario, string password, string rol)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarUsuario", nombreUsuarioParameter, passwordParameter, rolParameter);
        }
    
        public virtual int SP_InsertarVenta(Nullable<int> clienteID, Nullable<int> usuarioID, string metodoPago, Nullable<decimal> total, string comentarios)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            var metodoPagoParameter = metodoPago != null ?
                new ObjectParameter("MetodoPago", metodoPago) :
                new ObjectParameter("MetodoPago", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarVenta", clienteIDParameter, usuarioIDParameter, metodoPagoParameter, totalParameter, comentariosParameter);
        }
    
        public virtual ObjectResult<SP_ObtenerClientes_Result> SP_ObtenerClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ObtenerClientes_Result>("SP_ObtenerClientes");
        }
    
        public virtual ObjectResult<SP_ObtenerMovimientosFinancieros_Result> SP_ObtenerMovimientosFinancieros()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ObtenerMovimientosFinancieros_Result>("SP_ObtenerMovimientosFinancieros");
        }
    
        public virtual ObjectResult<SP_ObtenerProductosServicios_Result> SP_ObtenerProductosServicios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ObtenerProductosServicios_Result>("SP_ObtenerProductosServicios");
        }
    
        public virtual ObjectResult<SP_ObtenerProveedores_Result> SP_ObtenerProveedores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ObtenerProveedores_Result>("SP_ObtenerProveedores");
        }
    
        public virtual ObjectResult<SP_ObtenerUsuarios_Result> SP_ObtenerUsuarios(string nombreUsuario, string password)
        {
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ObtenerUsuarios_Result>("SP_ObtenerUsuarios", nombreUsuarioParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SP_ObtenerVentas_Result> SP_ObtenerVentas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ObtenerVentas_Result>("SP_ObtenerVentas");
        }
    }
}
